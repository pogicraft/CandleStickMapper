import pandas as pd

from PySide6.QtWidgets import *
from PySide6.QtGui import *
from PySide6.QtCore import *
from PySide6.QtCharts import *
from PySide6.QtWebEngineWidgets import *
from munch import Munch
from qt_material import *
import sys
import time
from icecream import ic
import numpy as np
import statistics


def pen_h1():
	p = QPen()
	p.setWidth(5)
	return p


def pen_h2():
	p = QPen()
	p.setWidth(2)
	return p


def pen_highlight():
	p = QPen()
	p.setWidth(5)
	p.setColor(Qt.yellow)
	return p


def format_dollar(string):
	return "${:.2f}".format(string)


class CandlestickGroup(QGraphicsItemGroup):
	def __init__(self, max_size=QSizeF(600, 400), candles=None, candle_width=14, parent=None):
		super().__init__(parent)
		
		self.setHandlesChildEvents(False)
		self.setAcceptHoverEvents(True)
		self.inter_candle_spacing = 10
		self.pre_candle_spacing = 20
		self.box_padding = 0  # this not being zero breaks the code
		self.padding_percent = 30
		self.candle_width = candle_width
		self.ob_box = QGraphicsRectItem(0, 0, max_size.width(), max_size.height())
		self.ob_box.setPen(pen_h1())
		self.candle_box = QGraphicsRectItem(0, 0, max_size.width() * ((100 - self.box_padding) / 100),
											max_size.height() * ((100 - self.box_padding) / 100))
		self.candle_box.moveBy(max_size.width() * self.box_padding / 100 / 2, max_size.height() * self.box_padding / 100 / 2)
		self.data_box = DataBox()
		self.data_box.setZValue(100)
		self.data_box.hide()
		self.candles = []
		self.seglines = []
		if self.candles:
			if isinstance(self.candles, list):
				for each in self.candles:
					self.add_candle(*each)
		self.addToGroup(self.ob_box)
		self.addToGroup(self.candle_box)
		self.addToGroup(self.data_box)
		self.data_box.setPos(self.candle_box.boundingRect().right() - self.data_box.boundingRect().width(), self.candle_box.y())
		self.high = 0
		self.low = 0
		self.unreachable_price = 0
		self.active_selection = None
		self.previous_selection = None
		self.passive_selection = None
		self.hold_selection = False
		self.highlighter = QGraphicsPathItem()
		self.highlighter.setPen(pen_highlight())
		self.addToGroup(self.highlighter)
		self.highlighter.hide()
	
	def update_candles(self):
		for n, each in enumerate(self.candles):
			each.setX(n * (self.candle_width + self.inter_candle_spacing) + self.candle_box.x() + self.pre_candle_spacing)
			each.ferment(self.high + self.unreachable_price, self.low - self.unreachable_price, self.candle_box.boundingRect().bottom(),
						 self.candle_box.boundingRect().top())
	
	def add_candle(self, v_open, v_high, v_low, v_close, v_time=0):
		if v_high >= self.high:
			self.high = v_high
		if self.low == 0:
			self.low = self.high
		if v_low <= self.low:
			self.low = v_low
		priced_range = self.high - self.low
		self.unreachable_price = priced_range * self.padding_percent / 100
		item = CandleItem(v_open, v_high, v_low, v_close, self.candle_width, v_time)
		item.setAcceptHoverEvents(True)
		item.hover.enter.connect(self.hover_candle)
		item.hover.leave.connect(self.leave_candle)
		if v_time > 0:
			group_a = []
			group_b = []
			for a in self.candles:
				if a.timestamp <= v_time:
					group_a.append(a)
			group_a.append(item)
			for b in self.candles:
				if b.timestamp > v_time:
					group_b.append(b)
			self.candles = group_a + group_b
		else:
			self.candles.append(item)
		self.addToGroup(item)
		self.update_candles()
	
	def toggle_seglines(self):
		if isinstance(self.seglines, list) and len(self.seglines) > 0:
			for each in self.seglines:
				if each.isVisible():
					each.hide()
				else:
					each.show()
		else:
			return False
	
	def create_seglines(self, number_lines=4):
		lines_index = number_lines + 1
		priced_range = self.high - self.low + (self.unreachable_price * 2)
		price_step = priced_range / lines_index
		step = self.candle_box.boundingRect().height() / lines_index
		self.seglines.append(Seglines(self.candle_box.boundingRect().width() - 1, self.low - self.unreachable_price, invisible_line=True))
		self.seglines[-1].setY(self.candle_box.sceneBoundingRect().bottom())
		for n in range(number_lines):
			iteration = n + 1
			location = step * iteration
			price_at = priced_range / lines_index * iteration
			l = Seglines(self.candle_box.boundingRect().width() - 1, self.low - self.unreachable_price + price_at)
			l.setY(self.candle_box.sceneBoundingRect().bottom() - location)
			l.moveBy(self.candle_box.sceneBoundingRect().left(), 0)
			self.seglines.append(l)
		self.seglines.append(Seglines(self.candle_box.boundingRect().width() - 1, self.high + self.unreachable_price, invisible_line=True))
		self.seglines[-1].setY(self.candle_box.sceneBoundingRect().top())
		for each in self.seglines:
			each.setZValue(-100)
			each.setX(self.candle_box.sceneBoundingRect().left())
			self.addToGroup(each)
		self.ob_box.setRect(self.scene().itemsBoundingRect())
	
	def create_vert_lines(self, by_segment=5, by_timestamp=0, by_day=0, by_candle_count=0):
		if by_timestamp == 0 and by_day == 0 and by_candle_count == 0:
			pixel_length = self.candle_box.boundingRect().width() / (by_segment + 1)
	
	def insert_metadata(self, candle_index, dict_key, set_value):
		self.candles[candle_index].metadata[dict_key] = set_value
	
	def candle_count(self):
		return len(self.candles)
	
	def hoverEnterEvent(self, event):
		super().hoverEnterEvent(event)
	
	def mousePressEvent(self, event):
		if self.active_selection:
			if self.hold_selection:
				self.hold_selection = False
				if self.passive_selection:
					self.hover_candle(self.passive_selection)
					self.passive_selection = None
					self.hold_selection = True
				else:
					self.leave_candle(None)
			else:
				self.hold_selection = True
		super().mousePressEvent(event)
	
	def hover_candle(self, target):
		if not self.hold_selection:
			self.active_selection = target
			self.highlighter.setPath(self.mapFromItem(target, target.highlighter_path()))
			self.highlighter.show()
			self.data_box.show()
			self.data_box.update_box(target.open, target.high, target.low, target.close)
		else:
			self.passive_selection = target
	
	def leave_candle(self, target):
		if not self.hold_selection:
			self.active_selection = None
			self.previous_selection = target
			self.highlighter.hide()
			self.data_box.hide()
		else:
			self.passive_selection = None


class HoverClass(QObject):
	enter = Signal(object)
	leave = Signal(object)


class DataBox(QGraphicsItemGroup):
	def __init__(self, parent=None):
		super().__init__(parent)
		
		self.box = QGraphicsRectItem()
		self.white_brush = QBrush(Qt.white)
		self.box.setBrush(self.white_brush)
		self.setFlag(QGraphicsItem.ItemIsMovable, True)
		self.high = QGraphicsTextItem('High: $0.00')
		self.low = QGraphicsTextItem('Low: $0.00')
		self.open = QGraphicsTextItem('Open: $0.00')
		self.close = QGraphicsTextItem('Close: $0.00')
		self.texts = [self.open, self.high, self.low, self.close]
		self.the_width = max([a.boundingRect().width() for a in self.texts])
		self.padding_pixels = 5
		for n, each in enumerate(self.texts):
			each.setY(n * each.boundingRect().height() + self.padding_pixels)
		self.addToGroup(self.box)
		self.addToGroup(self.high)
		self.addToGroup(self.low)
		self.addToGroup(self.open)
		self.addToGroup(self.close)
		self.box.setRect(self.boundingRect().adjusted(-self.padding_pixels, -self.padding_pixels, self.padding_pixels * 2, self.padding_pixels * 2))
		self.box.setPen(pen_h2())
	
	def update_box(self, v_open, v_high, v_low, v_close):
		self.high.setPlainText('High: ' + format_dollar(v_high))
		self.close.setPlainText('Close: ' + format_dollar(v_close))
		self.open.setPlainText('Open: ' + format_dollar(v_open))
		self.low.setPlainText('Low: ' + format_dollar(v_low))
		p = self.box.pen()
		if v_open > v_close:
			p.setColor(Qt.darkRed)
			self.box.setPen(p)
		else:
			p.setColor(Qt.darkGreen)
			self.box.setPen(p)
		self.recalc_width()
	
	def recalc_width(self):
		width_change = max([a.boundingRect().width() for a in self.texts]) - self.the_width
		if width_change != 0:
			self.box.setRect(self.box.boundingRect().adjusted(0, 0, width_change, 0))
			self.the_width += width_change


class CandleItem(QGraphicsItemGroup):
	def __init__(self, v_open, v_high, v_low, v_close, width=12, timestamp=0, parent=None):
		super().__init__(parent)
		
		self.setAcceptHoverEvents(True)
		self.setHandlesChildEvents(False)
		self.open = v_open
		self.high = v_high
		self.low = v_low
		self.close = v_close
		self.body_width = width
		self.wick_range = self.high - self.low
		self.body_range = self.open - self.close
		self.timestamp = timestamp
		self.body = QGraphicsRectItem()
		self.wick = QGraphicsLineItem()
		self.body.setZValue(20)
		self.wick.setZValue(-20)
		self.body.setBrush(self.body_brush())
		self.addToGroup(self.body)
		self.addToGroup(self.wick)
		self.body.setAcceptHoverEvents(True)
		self.wick.setAcceptHoverEvents(True)
		self.metadata = dict()
		self.edit_lines_group = QGraphicsItemGroup()
		self.data_values_group = QGraphicsItemGroup()
		self.hold_lines = False
		self.hold_values = False
		self.hover = HoverClass()
		self.setup_meta_groups()
	
	def ferment(self, dollar_max, dollar_min, pixel_bottom, pixel_top):
		ratio = (pixel_bottom - pixel_top) / (dollar_max - dollar_min)
		self.wick.setLine(self.body_width / 2, 0, self.body_width / 2, ratio * (self.high - self.low))
		self.wick.setY(self.boundingRect().top() + ratio * (dollar_max - self.high))
		if self.open < self.close:
			self.body.setRect(QRectF(0, self.wick.y() + ratio * (self.high - self.close), self.body_width, ratio * (self.close - self.open)))
		else:
			self.body.setRect(QRectF(0, self.wick.y() + ratio * (self.high - self.open), self.body_width, ratio * (self.open - self.close)))
	
	def body_brush(self):
		if self.open < self.close:
			return QBrush(Qt.green)
		else:
			return QBrush(Qt.red)
	
	def setup_meta_groups(self):
		self.addToGroup(self.edit_lines_group)
		self.addToGroup(self.data_values_group)
	
	def highlighter_path(self):
		path = QPainterPath()
		path.moveTo(self.body_width / 2, self.wick.sceneBoundingRect().top())
		path.lineTo(self.body_width / 2, self.wick.sceneBoundingRect().bottom())
		path.addRect(self.body.boundingRect())
		return path
	
	def hoverEnterEvent(self, event):
		self.hover.enter.emit(self)
		super().hoverEnterEvent(event)
	
	def hoverLeaveEvent(self, event):
		self.hover.leave.emit(self)
		super().hoverLeaveEvent(event)


class Seglines(QGraphicsItemGroup):
	def __init__(self, width, label=0.00, label_location='right', font=QFont('Arial', 12), invisible_line=False, parent=None):
		super().__init__(parent)
		
		self.line = QGraphicsLineItem(0, 0, width, 0)
		self.text = QGraphicsTextItem(format_dollar(label))
		self.text.setFont(font)
		p = QPen()
		p.setWidth(2)
		p.setColor(Qt.gray)
		p.setStyle(Qt.DashDotDotLine)
		self.line.setPen(p)
		x_offset = Munch(right=width + self.text.boundingRect().width() / 4)
		y_offset = Munch(right=0 - self.text.boundingRect().height() / 2)
		self.text.setPos(x_offset[label_location], y_offset[label_location])
		if not invisible_line:
			self.addToGroup(self.line)
		self.addToGroup(self.text)


if __name__ == "__main__":
	q = QApplication()
	w = QMainWindow()
	c = QGraphicsView()
	s = QGraphicsScene()
	c.setScene(s)
	w.setCentralWidget(c)
	f = CandlestickGroup()
	frame = pd.read_csv('SPY.csv').sample(n=15)
	high = max(frame.loc[:, 'High'].values.tolist())
	low = min(frame.loc[:, 'Low'].values.tolist())
	for row, value in frame.iterrows():
		f.add_candle(value["Open"], value["High"], value["Low"], value["Close"],
				 int(time.mktime(datetime.strptime(value["Date"], "%Y-%m-%d").timetuple())))
	# [ic(each.high, each.low, each.open, each.close) for each in f.candles]
	ic(high, low)
	s.addItem(f)
	f.create_seglines()
	s.setSceneRect(s.itemsBoundingRect())
	w.show()
	q.exec()
